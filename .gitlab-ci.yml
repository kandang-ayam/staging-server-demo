image: docker:stable

services:
  - docker:dind

variables:
  STAGING_URL: https://app-staging.evilfactory.id
  PRODUCTION_URL: https://app.evilfactory.id

before_script:
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY

stages:
  - build
  - test
  - release
  - staging
  - production

build:
  stage: build
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

test:
  stage: test
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker run $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA node -e "console.log('ok')"

staging:
  stage: release
  only:
    - canary
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:staging
    - docker push $CI_REGISTRY_IMAGE:staging

deploy_staging:
  stage: staging
  only:
    - canary
  script:
    - apk update && apk add sshpass openssh
    - export IMAGE_NAME=$CI_REGISTRY_IMAGE:staging
    - sshpass -e ssh -o StrictHostKeyChecking=no $SSH_SERVER docker pull $IMAGE_NAME
    - sshpass -e ssh -o StrictHostKeyChecking=no $SSH_SERVER docker-compose up -d $STAGING_APP_NAME
    - echo "> Done. Check it at $STAGING_URL"
  environment:
    name: staging
    url: $STAGING_URL

deploy_production:
  stage: production
  only:
    - master
  script:
    - apk update && apk add sshpass openssh
    - export IMAGE_NAME=$CI_REGISTRY_IMAGE:stable
    - docker pull $CI_REGISTRY_IMAGE:staging
    - docker tag $CI_REGISTRY_IMAGE:staging $CI_REGISTRY_IMAGE:stable
    - docker push $CI_REGISTRY_IMAGE:stable
    - sshpass -e ssh -o StrictHostKeyChecking=no $SSH_SERVER docker pull $IMAGE_NAME
    - sshpass -e ssh -o StrictHostKeyChecking=no $SSH_SERVER docker-compose up -d $PRODUCTION_APP_NAME
    - echo "> Done. Check it at $PRODUCTION_URL"
  environment:
    name: production
    url: $PRODUCTION_URL
  when: manual
